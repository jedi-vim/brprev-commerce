from http import HTTPStatus

from flask import Blueprint, jsonify, request
from flask_jwt import jwt_required
from marshmallow import ValidationError
from sqlalchemy.orm.exc import NoResultFound

from brprev_commerce.database import db
from brprev_commerce.models import Customer, Purchase
from brprev_commerce.schemas import (CustomerSchema, ProductSchema,
                                     PurchaseSchema, UserSchema)

api_v1 = Blueprint('api_v1', __name__, url_prefix='/api/v1')


def init_app(app):
    app.register_blueprint(api_v1)


@api_v1.errorhandler(ValidationError)
def validation_error_handler(error):
    # Its not a good idea to response with BAD_REQUEST when should
    # be NOT_FOUND. I tried to create a subclass of ValidationError to
    # enjoy the schema error messages generated by mashmallow validation
    # but it didn't work cause everything was catching by this error handler
    # by virtue of class inheritance.
    # See schemas.py:45
    return jsonify(error.messages), HTTPStatus.BAD_REQUEST


@api_v1.route('/')
def index():
    return 'It Works!'


@api_v1.route('/user', methods=['POST'])
def create_user():
    user = UserSchema().load(request.json)
    db.session.add(user)
    db.session.commit()
    return UserSchema().dump(user)


@api_v1.route('/customer', methods=['POST'])
@jwt_required()
def create_person():
    person = CustomerSchema().load(request.json)
    db.session.add(person)
    db.session.commit()
    return CustomerSchema().dump(person)


@api_v1.route('/product', methods=['POST'])
@jwt_required()
def create_product():
    product = ProductSchema().load(request.json)
    db.session.add(product)
    db.session.commit()
    return ProductSchema().dump(product)


@api_v1.route('/purchase', methods=['POST'])
@jwt_required()
def init_purchase():
    payload = PurchaseSchema().load(request.json, partial=('id',))
    customer = Customer.get_one(payload['customer_id'])
    purchase = Purchase()
    purchase.customer = customer
    db.session.add(purchase)
    db.session.commit()
    return PurchaseSchema().dump(purchase)


@api_v1.route('/purchase', methods=['PATCH'])
@jwt_required()
def add_purchase_item():
    payload = PurchaseSchema().load(request.json, partial=('customer_id',))
    purchase = Purchase.get_one(payload['id'])
    for item in payload['items']:
        purchase.add_item(**item)
    db.session.commit()
    return PurchaseSchema().dump(purchase)


@api_v1.route('/purchase/<int:purchase_id>', methods=['GET', 'DELETE'])
@jwt_required()
def get_purchase(purchase_id):
    try:
        purchase = Purchase.get_one(purchase_id)
    except NoResultFound:
        return jsonify({'__all__': 'Purchase ID={} not found'}),
        HTTPStatus.NOT_FOUND
    if request.method == 'DELETE':
        purchase.close()
    db.session.commit()
    return PurchaseSchema().dump(purchase)
